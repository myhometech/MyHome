Here is a high-priority instruction set for your Dev GPT to implement and test Error Handling & Monitoring improvements for production readiness:

‚∏ª

üõ†Ô∏è Instructions for Dev GPT: Implement Error Tracking & Monitoring (HIGH PRIORITY)

üü† Issue Summary
	‚Ä¢	Symptom: Errors are logged to console or missed entirely
	‚Ä¢	Impact: No way to detect, diagnose, or act on production failures
	‚Ä¢	Goal: Add centralized error tracking, performance monitoring, and alerting

‚∏ª

‚úÖ Implementation Tasks

1. Integrate Sentry for Error Tracking
	‚Ä¢	Install SDK:
	‚Ä¢	For Node.js backend: @sentry/node
	‚Ä¢	For frontend (React/Next): @sentry/react + @sentry/tracing
	‚Ä¢	Initialize Sentry:
	‚Ä¢	Add Sentry DSN in both frontend and backend
	‚Ä¢	Initialize early in app lifecycle

// backend example
Sentry.init({
  dsn: process.env.SENTRY_DSN,
  tracesSampleRate: 1.0,
  environment: process.env.NODE_ENV,
});

	‚Ä¢	Capture errors manually if needed:

try {
  // risky logic
} catch (err) {
  Sentry.captureException(err);
  throw err;
}



‚∏ª

2. Enable Performance Monitoring
	‚Ä¢	Track slow requests, database queries, and render delays
	‚Ä¢	On the frontend:
	‚Ä¢	Use tracesSampleRate: 1.0 to sample full user flows (adjust in production)
	‚Ä¢	On the backend:
	‚Ä¢	Use transaction tracing for slow API calls and DB interactions

‚∏ª

3. Set Up Alerting
	‚Ä¢	In Sentry dashboard:
	‚Ä¢	Create alert rules for:
	‚Ä¢	High error rates
	‚Ä¢	Performance regressions
	‚Ä¢	Specific exceptions (e.g., DatabaseTimeoutError)
	‚Ä¢	Route alerts to:
	‚Ä¢	Slack/Email channels
	‚Ä¢	PagerDuty (if available)

‚∏ª

4. Enhance Logging for Debugging
	‚Ä¢	Add contextual metadata to error reports:
	‚Ä¢	userId, route, featureFlag, buildVersion
	‚Ä¢	Include breadcrumbs: last steps before error (API calls, user actions)
	‚Ä¢	Use Sentry.setUser() and Sentry.setContext() for tagging

‚∏ª

‚úÖ Testing Plan

1. Unit Tests
	‚Ä¢	Simulate thrown errors and assert they are reported to Sentry
	‚Ä¢	Test logs with/without context (e.g., missing user info)

2. Manual Testing
	‚Ä¢	Trigger a known frontend error (e.g., null access) in dev and staging
	‚Ä¢	Trigger a backend API error (e.g., force a DB query to fail)
	‚Ä¢	Check:
	‚Ä¢	Error appears in Sentry
	‚Ä¢	Stack trace and context are visible
	‚Ä¢	Alert is triggered (if thresholds met)

3. Deployment Smoke Test
	‚Ä¢	Deploy with Sentry DSN active in staging
	‚Ä¢	Use test routes or buttons to send intentional errors
	‚Ä¢	Confirm successful Sentry ingestion and alert visibility

‚∏ª

Would you like this documented as a rollout checklist or merged into a GitHub issue card format?